#include <reg52.h>
#include <stdlib.h>

// 定义端口
#define LED_PORT P0
#define LED_PORT1 P1
#define LED_PORT2 P2

// 针对11.0592MHz晶振优化的延时函数
void delay(unsigned int time) {
    unsigned int i, j;
    for (i = 0; i < time; i++)
        for (j = 0; j < 123; j++);
}

// 逐位点亮效果
void single_light() {
    unsigned char i;
    for (i = 0; i < 24; i++) {
        if (i < 8) {
            LED_PORT = ~(0x01 << i);
            LED_PORT1 = 0xff;
            LED_PORT2 = 0xff;
        } else if (i < 16) {
            LED_PORT = 0xff;
            LED_PORT1 = ~(0x01 << (i - 8));
            LED_PORT2 = 0xff;
        } else {
            LED_PORT = 0xff;
            LED_PORT1 = 0xff;
            LED_PORT2 = ~(0x01 << (i - 16));
        }
        delay(200);
    }
}

// 隔位点亮效果
void alternate_light() {
    unsigned char i;
    for (i = 0; i < 24; i += 2) {
        if (i < 8) {
            LED_PORT = ~(0x01 << i);
            if (i + 1 < 8) {
                LED_PORT |= ~(0x01 << (i + 1));
            }
            LED_PORT1 = 0xff;
            LED_PORT2 = 0xff;
        } else if (i < 16) {
            LED_PORT = 0xff;
            LED_PORT1 = ~(0x01 << (i - 8));
            if (i + 1 < 16) {
                LED_PORT1 |= ~(0x01 << ((i + 1) - 8));
            }
            LED_PORT2 = 0xff;
        } else {
            LED_PORT = 0xff;
            LED_PORT1 = 0xff;
            LED_PORT2 = ~(0x01 << (i - 16));
            if (i + 1 < 24) {
                LED_PORT2 |= ~(0x01 << ((i + 1) - 16));
            }
        }
        delay(200);
    }
}

// 对称点亮效果
void symmetric_light() {
    unsigned char i;
    for (i = 0; i < 12; i++) {
        unsigned char value = ~((0x01 << i) | (0x01 << (23 - i)));
        if (i < 8) {
            LED_PORT = value & 0xff;
            if (23 - i < 8) {
                LED_PORT |= (value >> 8) & 0xff;
            }
            LED_PORT1 = 0xff;
            LED_PORT2 = 0xff;
        } else {
            LED_PORT = 0xff;
            LED_PORT1 = value & 0xff;
            if (23 - i < 16) {
                LED_PORT1 |= (value >> 8) & 0xff;
            }
            LED_PORT2 = 0xff;
        }
        delay(200);
    }
}

// 渐亮渐灭效果
void fade_in_out() {
    unsigned char i, j;
    for (j = 0; j < 2; j++) {  // 两次循环，实现渐亮和渐灭
        for (i = 0; i < 8; i++) {  // 控制亮度等级
            if (j == 0) {  // 渐亮过程
                LED_PORT = ~(0xff << i);
                LED_PORT1 = ~(0xff << i);
                LED_PORT2 = ~(0xff << i);
            } else {  // 渐灭过程
                LED_PORT = (0xff << (8 - i));
                LED_PORT1 = (0xff << (8 - i));
                LED_PORT2 = (0xff << (8 - i));
            }
            delay(200);
        }
    }
}

// 闪烁扩散效果
void flash_spread() {
    unsigned char i, k;
    for (k = 0; k < 4; k++) {  // 闪烁扩散次数
        for (i = 0; i < 24; i++) {
            if (i < 8) {
                LED_PORT = ~(0x01 << i);
                LED_PORT1 = 0xff;
                LED_PORT2 = 0xff;
            } else if (i < 16) {
                LED_PORT = 0xff;
                LED_PORT1 = ~(0x01 << (i - 8));
                LED_PORT2 = 0xff;
            } else {
                LED_PORT = 0xff;
                LED_PORT1 = 0xff;
                LED_PORT2 = ~(0x01 << (i - 16));
            }
            delay(100);
        }
    }
}

// 走马灯循环闪烁效果
void running_light_blink() {
    unsigned char i, j;
    for (j = 0; j < 3; j++) {  // 循环闪烁次数
        for (i = 0; i < 24; i++) {
            if (i < 8) {
                LED_PORT = ~(0x01 << i);
                LED_PORT1 = 0xff;
                LED_PORT2 = 0xff;
            } else if (i < 16) {
                LED_PORT = 0xff;
                LED_PORT1 = ~(0x01 << (i - 8));
                LED_PORT2 = 0xff;
            } else {
                LED_PORT = 0xff;
                LED_PORT1 = 0xff;
                LED_PORT2 = ~(0x01 << (i - 16));
            }
            delay(150);
            // 闪烁部分
            if ((i % 4) == 3) {  // 每4个灯闪烁一次
                if (i < 8) {
                    LED_PORT = 0xff;
                } else if (i < 16) {
                    LED_PORT1 = 0xff;
                } else {
                    LED_PORT2 = 0xff;
                }
                delay(100);
                if (i < 8) {
                    LED_PORT = ~(0x01 << i);
                } else if (i < 16) {
                    LED_PORT1 = ~(0x01 << (i - 8));
                } else {
                    LED_PORT2 = ~(0x01 << (i - 16));
                }
            }
        }
    }
}

// 心跳闪烁效果
void heartbeat_flash() {
    unsigned char i;
    for (i = 0; i < 10; i++) {
        LED_PORT = 0xff;
        LED_PORT1 = 0xff;
        LED_PORT2 = 0xff;
        delay(100);
        LED_PORT = 0x00;
        LED_PORT1 = 0x00;
        LED_PORT2 = 0x00;
        if (i < 5) {
            delay(150);
        } else {
            delay(100);
        }
    }
}

// 随机闪烁跳动效果
void random_blink_jump() {
    unsigned char i, pos;
    for (i = 0; i < 20; i++) {
        pos = rand() % 24;
        if (pos < 8) {
            LED_PORT = ~(0x01 << pos);
            LED_PORT1 = 0xff;
            LED_PORT2 = 0xff;
        } else if (pos < 16) {
            LED_PORT = 0xff;
            LED_PORT1 = ~(0x01 << (pos - 8));
            LED_PORT2 = 0xff;
        } else {
            LED_PORT = 0xff;
            LED_PORT1 = 0xff;
            LED_PORT2 = ~(0x01 << (pos - 16));
        }
        delay(100);
    }
}

// 分层流水闪烁效果
void layered_flow_blink() {
    unsigned char i, j;
    for (j = 0; j < 3; j++) {  // 循环次数
        for (i = 0; i < 4; i++) {  // 分为4层
            // 第1层
            LED_PORT = ~(0x0f << (2 * i));
            LED_PORT1 = 0xff;
            LED_PORT2 = 0xff;
            delay(150);
            // 第2层
            LED_PORT = 0xff;
            LED_PORT1 = ~(0x0f << (2 * i));
            LED_PORT2 = 0xff;
            delay(150);
            // 第3层
            LED_PORT = 0xff;
            LED_PORT1 = 0xff;
            LED_PORT2 = ~(0x0f << (2 * i));
            delay(150);
            // 第4层
            LED_PORT = 0xff;
            LED_PORT1 = 0xff;
            LED_PORT2 = ~(0x0f << (2 * i));
            delay(150);
        }
    }
}

// 交叉闪烁效果
void cross_flash() {
    unsigned char i;
    for (i = 0; i < 8; i++) {
        LED_PORT = ~(0x55 << i);
        LED_PORT1 = ~(0x55 << i);
        LED_PORT2 = ~(0x55 << i);
        delay(150);
    }
}

// 旋转点亮熄灭效果
void rotate_light() {
    unsigned char i, j;
    for (j = 0; j < 4; j++) {  // 旋转次数
        for (i = 0; i < 8; i++) {
            LED_PORT = ~(0x01 << i);
            if (i + 2 < 8) {
                LED_PORT1 = ~(0x01 << (i + 2));
            } else {
                LED_PORT1 = ~(0x01 << (i + 2 - 8));
            }
            if (i + 4 < 8) {
                LED_PORT2 = ~(0x01 << (i + 4));
            } else {
                LED_PORT2 = ~(0x01 << (i + 4 - 8));
            }
            delay(150);
        }
    }
}

// 波浪流动效果
void wave_flow() {
    unsigned char i, j;
    for (j = 0; j < 3; j++) {  // 波动次数
        for (i = 0; i < 4; i++) {
            // 第1个波峰
            LED_PORT = ~(0x80 >> i);
            if (i + 1 < 8) {
                LED_PORT1 = ~(0x80 >> (i + 1));
            } else {
                LED_PORT1 = ~(0x80 >> (i + 1 - 8));
            }
            if (i + 2 < 8) {
                LED_PORT2 = ~(0x80 >> (i + 2));
            } else {
                LED_PORT2 = ~(0x80 >> (i + 2 - 8));
            }
            delay(120);
            // 第2个波峰
            LED_PORT = ~(0x01 << i);
            if (i + 1 < 8) {
                LED_PORT1 = ~(0x01 << (i + 1));
            } else {
                LED_PORT1 = ~(0x01 << (i + 1 - 8));
            }
            if (i + 2 < 8) {
                LED_PORT2 = ~(0x01 << (i + 2));
            } else {
                LED_PORT2 = ~(0x01 << (i + 2 - 8));
            }
            delay(120);
        }
    }
}

// 闪烁追逐效果
void flash_chase() {
    unsigned char i, j;
    for (j = 0; j < 4; j++) {  // 重复次数
        for (i = 0; i < 24; i++) {
            if (i < 8) {
                LED_PORT = ~(0x01 << i);
                LED_PORT1 = 0xff;
                LED_PORT2 = 0xff;
            } else if (i < 16) {
                LED_PORT = 0xff;
                LED_PORT1 = ~(0x01 << (i - 8));
                LED_PORT2 = 0xff;
            } else {
                LED_PORT = 0xff;
                LED_PORT1 = 0xff;
                LED_PORT2 = ~(0x01 << (i - 16));
            }
            delay(100);
            if ((i + 1) % 4 == 0) {  // 每4个灯为一组，每组最后一个灯闪烁后熄灭
                if (i < 8) {
                    LED_PORT = 0xff;
                } else if (i < 16) {
                    LED_PORT1 = 0xff;
                } else {
                    LED_PORT2 = 0xff;
                }
                delay(50);
            }
        }
    }
}

// 流星滑落效果
void meteor_fall() {
    unsigned char i, j;
    for (j = 0; j < 5; j++) {  // 流星滑落次数
        for (i = 0; i < 24; i++) {
            if (i < 8) {
                LED_PORT = ~(0x80 >> i);
                LED_PORT1 = 0xff;
                LED_PORT2 = 0xff;
            } else if (i < 16) {
                LED_PORT = 0xff;
                LED_PORT1 = ~(0x80 >> (i - 8));
                LED_PORT2 = 0xff;
            } else {
                LED_PORT = 0xff;
                LED_PORT1 = 0xff;
                LED_PORT2 = ~(0x80 >> (i - 16));
            }
            delay(80);
        }
    }
}

// 主函数
void main() {
    while (1) {
        single_light();
        alternate_light();
        symmetric_light();
        fade_in_out();
        flash_spread();
        running_light_blink();
        heartbeat_flash();
        random_blink_jump();
        layered_flow_blink();
        cross_flash();
        rotate_light();
        wave_flow();
        flash_chase();
        meteor_fall();
    }
}
